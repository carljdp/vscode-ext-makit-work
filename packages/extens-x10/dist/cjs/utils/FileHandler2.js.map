{"version":3,"sources":["../../../src/utils/FileHandler2.ts"],"sourceRoot":"./","sourcesContent":["// file: src/utils/FileHandler2.ts\r\n\r\nimport fs from 'fs-extra';\r\n\r\nimport { _isProd_, _isDev_, _isDebug_ } from '../dev/EnvConf.js';\r\n\r\nimport { storageService } from '../services';\r\n\r\n// -rwxr--r-- 1 carljdp carljdp     4 Mar 30 11:23 ./code.lock\r\n// in %APPDATA%\\Code\r\n\r\n// other\r\n// /home/carljdp/.vscode-server/data/User/workspaceStorage/6e76c5035faaf2663cd671e2da210c28/vscode.lock\r\n// /home/carljdp/.vscode-server/data/User/workspaceStorage/dad357051edf104625c9a39af5bc9f77/vscode.lock\r\n// /home/carljdp/.vscode-server/extensions/ritwickdey.liveserver-5.7.9/node_modules/lodash/flake.lock\r\n// /home/carljdp/.vscode-server/extensions/ms-mssql.mssql-1.22.0/node_modules/lodash/flake.lock\r\n// /home/carljdp/.vscode-server/extensions/oracle.mysql-shell-for-vs-code-1.14.2-linux-x64/shell/lib/mysqlsh/plugins/mrs_plugin/examples/mrs_notes/node_modules/lodash/flake.lock\r\n\r\n// https://github.com/microsoft/vscode/issues/127861#issuecomment-877417451\r\n// There is now a lockfile, so if there's an existing Code instance running from that profile directory but not listening on the debug port, you will be presented with the same dialog we show in the browser case:\r\n//\r\n\r\n// profileLocation\r\n\r\nexport interface FileHandler2Options {\r\n\r\n}\r\n\r\n// Purpose: \r\n// - We are attempting to read and write to files owned by vscode, so\r\n// - we need to be cautious about how we handle these files.\r\n\r\n/**\r\n * A class that\r\n\r\n */\r\nexport class FileHandler2 {\r\n\r\n\r\n\r\n\r\n    // /**\r\n    //  * Writes data to a file\r\n    //  */\r\n    // async writeFile(filePath: string, data: string, encoding: BufferEncoding = 'utf8'): Promise<void> {\r\n    //     try {\r\n    //         //\r\n    //     } catch (err) {\r\n    //         //\r\n    //     } finally {\r\n    //         //\r\n    //     }\r\n    // }\r\n\r\n    // /**\r\n    //  * Reads data from a file\r\n    //  */\r\n    // async readFile(filePath: string, encoding: BufferEncoding = 'utf8'): Promise<string> {\r\n    //     try {\r\n    //         //\r\n    //     } catch (err) {\r\n    //         //\r\n    //     } finally {\r\n    //         //\r\n    //     }\r\n    // }\r\n\r\n\r\n}\r\n"],"names":["FileHandler2"],"rangeMappings":";;;;;;;;;;;;","mappings":"AAAA,kCAAkC;;;;;+BAoCrBA;;;eAAAA;;;AAAN,MAAMA;AAgCb"}