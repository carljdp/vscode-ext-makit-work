{"version":3,"sources":["../../../src/utils/Meta.ts"],"sourceRoot":"./","sourcesContent":["// file: /src/utils/Meta.ts\r\n\r\n\r\nfunction splitStackTraceLine(line: string): string[] {\r\n    // to split a string like \"Object.fnName (path/to/file)\"\r\n    // into [\"async w.kb\", \"path/to/file\"]\r\n\r\n    // remove the leading spaces and the 'at' keyword\r\n    const lean = line.replace(/^\\s*at /, \"\").trim();\r\n\r\n    const part0noTrim = ((lean.match(/^([a-zA-z._$ ]+)\\s+/) || [])[0] || \"\");\r\n    let part0 = part0noTrim.trim();\r\n    let part1 = lean.substring(part0noTrim.length).replace(/(^\\()|(\\)$)/g, \"\");\r\n\r\n    part0 = (part0.length > 0 ? part0 : \"<anonymous>\");\r\n    part1 = (part1.length > 0 ? part1 : \"<unknown:0:0>\");\r\n\r\n    return [ part0, part1 ];\r\n  }\r\n\r\n\r\n\r\nexport function getContextName(context?: Function|null): string {\r\n    // 'caller' property is non-standard and cannot be used in strict mode.\r\n    // Hence, we will need to change the approach to pass the actual function or use Error stack trace.\r\n    \r\n    let callerName: string = \"anonymous\";\r\n    let callerType: string = \"unknown\";\r\n\r\n    if (context) {\r\n        // Directly using the passed context's name property if available.\r\n        callerName = context.name || \"anonymous\";\r\n\r\n        // Checking if the context is an instance of a class.\r\n        if (context.prototype) {\r\n            callerType = \"class\";\r\n        } else {\r\n            callerType = \"function\";\r\n        }\r\n    } else {\r\n        // Using Error stack trace to get the calling function's name.\r\n        // because `caller` and `callee` is discouraged in strict mode.\r\n\r\n        const stackLine = new Error().stack?.split('\\n')[2].trim() || \"\";\r\n\r\n        // return a default value if the stackLine is empty.\r\n        const errorStackTrace = new Error().stack?.split('\\n') || [\r\n            \"Error: Error message\",\r\n            \"\\tat anonymous (unknown-file:0:0)\",\r\n            \"\\tat anonymous (unknown-file:0:0)\",\r\n            \"\\tat anonymous (unknown-file:0:0)\",\r\n        ];\r\n\r\n        // skipping the first line which is the error message.\r\n        const parsedStackTrace = errorStackTrace.slice(1).map(splitStackTraceLine);\r\n\r\n        const callerNameParts = parsedStackTrace[1][0].split(\".\");\r\n\r\n        if (callerNameParts.length === 2) {\r\n            callerName = callerNameParts[1];\r\n            callerType = callerNameParts[0];\r\n        } else {\r\n            callerName = callerNameParts[0];\r\n        }\r\n\r\n    }\r\n\r\n    return `${callerName}`;\r\n}\r\n\r\n"],"names":["getContextName","splitStackTraceLine","line","lean","replace","trim","part0noTrim","match","part0","part1","substring","length","context","callerName","callerType","name","prototype","stackLine","Error","stack","split","errorStackTrace","parsedStackTrace","slice","map","callerNameParts"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA,2BAA2B;;;;;+BAsBXA;;;eAAAA;;;AAnBhB,SAASC,oBAAoBC,IAAY;IACrC,wDAAwD;IACxD,sCAAsC;IAEtC,iDAAiD;IACjD,MAAMC,OAAOD,KAAKE,OAAO,CAAC,WAAW,IAAIC,IAAI;IAE7C,MAAMC,cAAe,AAACH,CAAAA,KAAKI,KAAK,CAAC,0BAA0B,EAAE,AAAD,CAAE,CAAC,EAAE,IAAI;IACrE,IAAIC,QAAQF,YAAYD,IAAI;IAC5B,IAAII,QAAQN,KAAKO,SAAS,CAACJ,YAAYK,MAAM,EAAEP,OAAO,CAAC,gBAAgB;IAEvEI,QAASA,MAAMG,MAAM,GAAG,IAAIH,QAAQ;IACpCC,QAASA,MAAME,MAAM,GAAG,IAAIF,QAAQ;IAEpC,OAAO;QAAED;QAAOC;KAAO;AACzB;AAIK,SAAST,eAAeY,OAAuB;IAClD,uEAAuE;IACvE,mGAAmG;IAEnG,IAAIC,aAAqB;IACzB,IAAIC,aAAqB;IAEzB,IAAIF,SAAS;QACT,kEAAkE;QAClEC,aAAaD,QAAQG,IAAI,IAAI;QAE7B,qDAAqD;QACrD,IAAIH,QAAQI,SAAS,EAAE;YACnBF,aAAa;QACjB,OAAO;YACHA,aAAa;QACjB;IACJ,OAAO;QACH,8DAA8D;QAC9D,+DAA+D;QAE/D,MAAMG,YAAY,IAAIC,QAAQC,KAAK,EAAEC,MAAM,KAAK,CAAC,EAAE,CAACf,UAAU;QAE9D,oDAAoD;QACpD,MAAMgB,kBAAkB,IAAIH,QAAQC,KAAK,EAAEC,MAAM,SAAS;YACtD;YACA;YACA;YACA;SACH;QAED,sDAAsD;QACtD,MAAME,mBAAmBD,gBAAgBE,KAAK,CAAC,GAAGC,GAAG,CAACvB;QAEtD,MAAMwB,kBAAkBH,gBAAgB,CAAC,EAAE,CAAC,EAAE,CAACF,KAAK,CAAC;QAErD,IAAIK,gBAAgBd,MAAM,KAAK,GAAG;YAC9BE,aAAaY,eAAe,CAAC,EAAE;YAC/BX,aAAaW,eAAe,CAAC,EAAE;QACnC,OAAO;YACHZ,aAAaY,eAAe,CAAC,EAAE;QACnC;IAEJ;IAEA,OAAO,CAAC,EAAEZ,WAAW,CAAC;AAC1B"}