{"version":3,"sources":["../../../src/services/StorageService.ts"],"sourceRoot":"./","sourcesContent":["// file: src/services/StorageService.ts\r\n\r\nimport path from 'path';\r\nimport fs from 'fs-extra';\r\nimport crypto from 'crypto';\r\n\r\nimport { IService, Service } from '../common/Service';\r\n\r\n\r\ninterface IStorageService extends IService {\r\n\r\n    // instance members common to all storage-like things\r\n\r\n    cwd(): string;\r\n\r\n    // sepertor(): string;\r\n\r\n    readFile(location: string, name: string, data: Uint8Array): Promise<boolean>;\r\n\r\n    writeFile(location: string, name: string, data: Uint8Array): Promise<boolean>;\r\n\r\n}\r\n\r\nclass StorageService extends Service implements IStorageService {\r\n\r\n    // static fileCache = new Map<string, Record<string, any>>();\r\n\r\n    public constructor(key?: string) {\r\n        super();\r\n        this.instanceKey = Symbol.for(key || 'Storage');\r\n    }\r\n\r\n    public cwd(): string {\r\n        return process.cwd();\r\n    }\r\n\r\n    // static async memoizedReadFile(filePath: string): Promise<string> {\r\n    //     const currentHash = await StorageService.calculateFileHash(filePath);\r\n\r\n    //     if (StorageService.fileCache.has(filePath) && StorageService.fileCache.get(filePath) === currentHash) {\r\n    //         console.log('File unchanged. Using cached data.');\r\n    //         return; // Assuming you store the file content somewhere or have another method to return cached content\r\n    //     }\r\n\r\n    //     fs.readFile(filePath, 'utf8', (err, data) => {\r\n    //         if (err) {\r\n    //             console.error(err);\r\n    //             return;\r\n    //         }\r\n\r\n    //         // Update the cache with the latest hash\r\n    //         fileCache.set(filePath, currentHash);\r\n\r\n    //         // Here you would normally process the file data and possibly cache it as well\r\n\r\n    //         console.log(data);\r\n    //     });\r\n    // }\r\n\r\n    // static async calculateFileHash(filePath: string): Promise<string> {\r\n    //     return new Promise((resolve, reject) => {\r\n    //         const hash = crypto.createHash('sha256');\r\n    //         const stream = fs.createReadStream(filePath);\r\n\r\n    //         stream.on('data', (chunk) => {\r\n    //             hash.update(chunk);\r\n    //         });\r\n\r\n    //         stream.on('end', () => {\r\n    //             resolve(hash.digest('hex'));\r\n    //         });\r\n\r\n    //         stream.on('error', (err) => {\r\n    //             reject(err);\r\n    //         });\r\n    //     });\r\n    // }\r\n\r\n    public async fileSize(location: string, name: string, factor: number = 1, fallback: number = 4096): Promise<number> {\r\n        try {\r\n            const pathToFile = path.join(location, name);\r\n            const stats = await fs.stat(pathToFile);\r\n            return stats.size;\r\n        } catch (error) {\r\n            this.instanceError('fileSize', 'get file size', error as Error);\r\n            return fallback;\r\n        }\r\n    }\r\n\r\n    public async readFile(location: string, name: string, byRefBuffer: Buffer, encoding: BufferEncoding = 'utf8'): Promise<boolean> {\r\n        try {\r\n            const pathToFile = path.join(location, name);\r\n            const fileData = await fs.readFile(pathToFile, {\r\n                encoding: encoding,\r\n                flag: 'r',\r\n            });\r\n            byRefBuffer.set(Buffer.from(fileData, 'utf8'));\r\n            return true;\r\n        } catch (error) {\r\n            this.instanceError('readFile', 'read file', error as Error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    public async writeFile(location: string, name: string, byRefBuffer: Buffer, encoding: BufferEncoding = 'utf8'): Promise<boolean> {\r\n        let result = false;\r\n        try {\r\n            const pathToFile = path.join(location, name);\r\n            await fs.writeFile(pathToFile, byRefBuffer, {\r\n                encoding: encoding,\r\n                flag: 'w'\r\n            });\r\n            result = true;\r\n        } catch (error) {\r\n            this.instanceError('writeFile', 'write file', error as Error);\r\n        }\r\n        return result;\r\n    }\r\n\r\n}\r\n\r\nexport { IStorageService, StorageService };"],"names":["StorageService","Service","key","instanceKey","Symbol","for","cwd","process","fileSize","location","name","factor","fallback","pathToFile","path","join","stats","fs","stat","size","error","instanceError","readFile","byRefBuffer","encoding","fileData","flag","set","Buffer","from","writeFile","result"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"AAAA,uCAAuC;;;;;+BAyHbA;;;eAAAA;;;6DAvHT;gEACF;yBAGmB;;;;;;AAiBlC,MAAMA,uBAAuBC,gBAAO;IAEhC,6DAA6D;IAE7D,YAAmBC,GAAY,CAAE;QAC7B,KAAK;QACL,IAAI,CAACC,WAAW,GAAGC,OAAOC,GAAG,CAACH,OAAO;IACzC;IAEOI,MAAc;QACjB,OAAOC,QAAQD,GAAG;IACtB;IAEA,qEAAqE;IACrE,4EAA4E;IAE5E,8GAA8G;IAC9G,6DAA6D;IAC7D,mHAAmH;IACnH,QAAQ;IAER,qDAAqD;IACrD,qBAAqB;IACrB,kCAAkC;IAClC,sBAAsB;IACtB,YAAY;IAEZ,mDAAmD;IACnD,gDAAgD;IAEhD,yFAAyF;IAEzF,6BAA6B;IAC7B,UAAU;IACV,IAAI;IAEJ,sEAAsE;IACtE,gDAAgD;IAChD,oDAAoD;IACpD,wDAAwD;IAExD,yCAAyC;IACzC,kCAAkC;IAClC,cAAc;IAEd,mCAAmC;IACnC,2CAA2C;IAC3C,cAAc;IAEd,wCAAwC;IACxC,2BAA2B;IAC3B,cAAc;IACd,UAAU;IACV,IAAI;IAEJ,MAAaE,SAASC,QAAgB,EAAEC,IAAY,EAAEC,SAAiB,CAAC,EAAEC,WAAmB,IAAI,EAAmB;QAChH,IAAI;YACA,MAAMC,aAAaC,aAAI,CAACC,IAAI,CAACN,UAAUC;YACvC,MAAMM,QAAQ,MAAMC,gBAAE,CAACC,IAAI,CAACL;YAC5B,OAAOG,MAAMG,IAAI;QACrB,EAAE,OAAOC,OAAO;YACZ,IAAI,CAACC,aAAa,CAAC,YAAY,iBAAiBD;YAChD,OAAOR;QACX;IACJ;IAEA,MAAaU,SAASb,QAAgB,EAAEC,IAAY,EAAEa,WAAmB,EAAEC,WAA2B,MAAM,EAAoB;QAC5H,IAAI;YACA,MAAMX,aAAaC,aAAI,CAACC,IAAI,CAACN,UAAUC;YACvC,MAAMe,WAAW,MAAMR,gBAAE,CAACK,QAAQ,CAACT,YAAY;gBAC3CW,UAAUA;gBACVE,MAAM;YACV;YACAH,YAAYI,GAAG,CAACC,OAAOC,IAAI,CAACJ,UAAU;YACtC,OAAO;QACX,EAAE,OAAOL,OAAO;YACZ,IAAI,CAACC,aAAa,CAAC,YAAY,aAAaD;YAC5C,OAAO;QACX;IACJ;IAEA,MAAaU,UAAUrB,QAAgB,EAAEC,IAAY,EAAEa,WAAmB,EAAEC,WAA2B,MAAM,EAAoB;QAC7H,IAAIO,SAAS;QACb,IAAI;YACA,MAAMlB,aAAaC,aAAI,CAACC,IAAI,CAACN,UAAUC;YACvC,MAAMO,gBAAE,CAACa,SAAS,CAACjB,YAAYU,aAAa;gBACxCC,UAAUA;gBACVE,MAAM;YACV;YACAK,SAAS;QACb,EAAE,OAAOX,OAAO;YACZ,IAAI,CAACC,aAAa,CAAC,aAAa,cAAcD;QAClD;QACA,OAAOW;IACX;AAEJ"}