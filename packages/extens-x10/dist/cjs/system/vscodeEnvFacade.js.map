{"version":3,"sources":["../../../src/system/vscodeEnvFacade.ts"],"sourceRoot":"./","sourcesContent":["\r\nimport { promises as fs } from 'fs';\r\nimport * as os from 'os';\r\nimport * as path from 'path';\r\nimport * as vscode from 'vscode';\r\n\r\nconst USER_DATA_DIR_WINDO: Readonly<string> = \"%APPDATA%\\\\Code\";\r\nconst USER_DATA_DIR_LINUX: Readonly<string> = \"$HOME/.config/Code\";\r\nconst USER_DATA_DIR_MACOS: Readonly<string> = \"$HOME/Library/Application Support/Code\";\r\n\r\nconst EXTENSIONS_DIR_WINDO: Readonly<string> = \"%USERPROFILE%\\\\.vscode\\\\extensions\";\r\nconst EXTENSIONS_DIR_LINUX: Readonly<string> = \"~/.vscode/extensions\";\r\nconst EXTENSIONS_DIR_MACOS: Readonly<string> = \"~/.vscode/extensions\";\r\n\r\n\r\nenum Part {\r\n    Name,\r\n    Value,\r\n}\r\n\r\nfunction objectFromEnum<T extends Record<string, number | string>, U>(\r\n    part: Part,\r\n    enum_: T,\r\n    default_: U\r\n): Record<string, U> {\r\n    const result: Record<string, U> = {};\r\n    Object.entries(enum_).forEach(([name, value]) => {\r\n        // Ensuring only actual enum names are used, not reverse mappings\r\n        if (isNaN(Number(name))) {\r\n            const key = part === Part.Name ? name : value.toString();\r\n            result[key] = default_;\r\n        }\r\n    });\r\n    return result;\r\n}\r\n\r\n/**\r\n * @namespace XVS Cross-Platform Visual Studio Code\r\n */\r\nexport namespace XVS {\r\n\r\n    // CONSTANTS\r\n\r\n    export const DefaultDirs = {\r\n        UserData: {\r\n            Windows: \"%APPDATA%\\\\Code\",\r\n            Linux: \"$HOME/.config/Code\",\r\n            Mac: \"$HOME/Library/Application Support/Code\",\r\n        },\r\n        Extensions: {\r\n            Windows: \"%USERPROFILE%\\\\.vscode\\\\extensions\",\r\n            Linux: \"~/.vscode/extensions\",\r\n            Mac: \"~/.vscode/extensions\",\r\n        }\r\n    };\r\n\r\n    export enum OnFailReturn {\r\n        AsIs,\r\n        Empty,\r\n        Null,\r\n    }\r\n\r\n    export type onFailFn<T, U> = (original: T, error: Error) => U;\r\n\r\n    export enum RuntimeEnv {\r\n        Mac,\r\n        Windows,\r\n        Linux,\r\n        Web,\r\n        Unsupported\r\n    }\r\n\r\n    export enum SupportedEnv {\r\n        Mac,\r\n        Windows,\r\n        Linux,\r\n    }\r\n\r\n    export enum Directory {\r\n        UserData,\r\n        Extensions\r\n    }\r\n\r\n    export function getRuntimeEnv(): RuntimeEnv {\r\n        if (vscode.env.uiKind === vscode.UIKind.Web) {\r\n            return RuntimeEnv.Web;\r\n        } else {\r\n            switch (process.platform) {\r\n                case 'darwin':\r\n                    return RuntimeEnv.Mac;\r\n                case 'win32':\r\n                    return RuntimeEnv.Windows;\r\n                case 'linux':\r\n                    return RuntimeEnv.Linux;\r\n                default:\r\n                    return RuntimeEnv.Unsupported;\r\n            }\r\n        }\r\n    }\r\n\r\n    // TEMPLATED FUNCTIONS\r\n\r\n    export function _getDefaultUserDataDir_<T extends RuntimeEnv, U>(runtimeEnv: T, onFailCb: onFailFn<T, U>): string | U {\r\n        switch (runtimeEnv) {\r\n            case RuntimeEnv.Mac:\r\n                return DefaultDirs.UserData.Mac;\r\n            case RuntimeEnv.Windows:\r\n                return DefaultDirs.UserData.Windows;\r\n            case RuntimeEnv.Linux:\r\n                return DefaultDirs.UserData.Linux;\r\n            default:\r\n                return onFailCb(runtimeEnv, new Error('Unsupported platform'));\r\n        }\r\n    }\r\n\r\n    export function _getDefaultExtensionsDir_<T extends RuntimeEnv, U>(runtimeEnv: T, onFailCb: onFailFn<T, U>): string | U {\r\n\r\n        switch (runtimeEnv) {\r\n            case RuntimeEnv.Mac:\r\n                return DefaultDirs.Extensions.Mac;\r\n            case RuntimeEnv.Windows:\r\n                return DefaultDirs.Extensions.Windows;\r\n            case RuntimeEnv.Linux:\r\n                return DefaultDirs.Extensions.Linux;\r\n            default:\r\n                return onFailCb(runtimeEnv, new Error('Unsupported platform'));\r\n        }\r\n    }\r\n\r\n    async function _resolveRelativePath_<T extends string | null, U>(inputPath: T, onFailCb: onFailFn<T, U>): Promise<string | U> {\r\n        if (inputPath === null) {\r\n            return onFailCb(inputPath, new Error('Input path is null'));\r\n        }\r\n\r\n        // Replace $HOME or ~ with the user's home directory\r\n        let resolvedPath = inputPath.replace(/^~|\\$HOME/, os.homedir());\r\n\r\n        // Replace environment variables like %APPDATA%\r\n        resolvedPath = resolvedPath.replace(/%([^%]+)%/g, (_, key) => process.env[key] ?? '');\r\n\r\n        // Use path.resolve to get an absolute path (this also handles . and ..)\r\n        try {\r\n            resolvedPath = path.resolve(resolvedPath);\r\n            return resolvedPath;\r\n        } catch (error) {\r\n            return onFailCb(inputPath, error as Error);\r\n        }\r\n    }\r\n\r\n    // CONCRETE FUNCTIONS\r\n\r\n    /**\r\n     * Get the default user data directory for the current platform\r\n     * @param platform The platform to get the default user data directory for\r\n     * @returns The default user data directory for the platform, or null on failure\r\n     */\r\n    export function getDefaultUserDataDirOrNull() {\r\n        return _getDefaultUserDataDir_<RuntimeEnv, null>(getRuntimeEnv(), (_original, error) => {\r\n            console.error('Failed to get the default user data directory:', error);\r\n            return null;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get the default extensions directory for the current platform\r\n     * @param platform The platform to get the default extensions directory for\r\n     * @returns The default extensions directory for the platform, or null on failure\r\n     */\r\n    export function getDefaultExtensionsDirOrNull() {\r\n        return _getDefaultExtensionsDir_<RuntimeEnv, null>(getRuntimeEnv(), (_original, error) => {\r\n            console.error('Failed to get the default extensions directory:', error);\r\n            return null;\r\n        });\r\n    }\r\n\r\n    export async function resolveRelativePathOrNull(path: string | null = null) {\r\n        return _resolveRelativePath_<string | null, null>(path, (_original, error) => {\r\n            console.error('Failed to resolve the relative path:', error);\r\n            return null;\r\n        });\r\n    }\r\n\r\n    export async function getUserDataDirResolvedOrNull() {\r\n        return resolveRelativePathOrNull(getDefaultUserDataDirOrNull());\r\n    }\r\n\r\n    export async function getExtensionsDirResolvedOrNull() {\r\n        return resolveRelativePathOrNull(getDefaultUserDataDirOrNull());\r\n    }\r\n\r\n    export class FilePaths {\r\n\r\n        private _initial: string | null;\r\n\r\n        private constructor(path: string | null) {\r\n            this._initial = path;\r\n        }\r\n\r\n        public static from(path: string | null) {\r\n            return new FilePaths(path);\r\n        }\r\n        public join(path: string | null) {\r\n            return new FilePaths(path);\r\n        }\r\n\r\n        public get initial(): string | null {\r\n            return this._initial;\r\n        };\r\n        public get resolved(): Promise<string | null> {\r\n            return resolveRelativePathOrNull(this._initial);\r\n        };\r\n    }\r\n\r\n\r\n    export class UserData {\r\n\r\n        private static readonly _dir = FilePaths.from(getDefaultUserDataDirOrNull());\r\n\r\n        static readonly keybindingsJson = FilePaths.from(UserData._dir.join('User/keybindings.json').initial);\r\n        static readonly tasksJson = FilePaths.from(UserData._dir.join('User/tasks.json').initial);\r\n        static readonly settingsJson = FilePaths.from(UserData._dir.join('User/settings.json').initial);\r\n\r\n        static readonly globalStateJson = FilePaths.from(UserData._dir.join('User/globalStorage/globalState.json').initial);\r\n        static readonly storageJson = FilePaths.from(UserData._dir.join('User/globalStorage/storage.json').initial);\r\n\r\n        static readonly profilesDir = FilePaths.from(UserData._dir.join('User/profiles').initial);\r\n\r\n        // TODO: populate dictionary with all possible profile files\r\n        // from storage.json[\"userDataProfiles\"]\r\n        // optional, confirm they exist in the profiles directory?\r\n        //\r\n        // Each profile then also contains:\r\n        // - extensions.json\r\n        // - keybindings.json\r\n        // - settings.json\r\n        // - tasks.json\r\n\r\n        // real location of most extensions:\r\n        // ~/.vscode/extensions.storage/*\r\n        // else ~/.vscode/extensions/* which links to ~/.vscode/profiles/Default/* ??\r\n\r\n        // ~/.vscode-insiders/extensions/extensions.json\r\n\r\n    }\r\n\r\n    export class Extensions {\r\n\r\n        private static readonly _dir = FilePaths.from(getDefaultExtensionsDirOrNull());\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport namespace _encapsulated_ {\r\n\r\n    /**\r\n     * @namespace _settings_\r\n     * @description The `settings.json` file is used to store the list of\r\n     * user settings. It is located in the following directories:\r\n     * - `<userDataDir>/User/[profiles/<profileId>/]settings.json`\r\n     * - `<userDataDir>/User/sync/[<profileId>/]settings.json`\r\n     */\r\n    export namespace _settings_ {\r\n\r\n        export interface SettingsJson {\r\n            [key: string]: any; // doc-level object / dictionary\r\n        }\r\n\r\n    } // namespace _settings_\r\n\r\n    /**\r\n     * @namespace _keybindings_\r\n     * @description The `keybindings.json` file is used to store the list of\r\n     * user keybindings. It is located in the following directories:\r\n     * - `<userDataDir>/User/profiles/<profileId>/keybindings.json`\r\n     */\r\n    export namespace _keybindings_ {\r\n\r\n        export interface Keybinding {\r\n            key: string;\r\n            command: string;\r\n            when?: string;\r\n            args?: any;\r\n        }\r\n\r\n        export interface KeybindingsJson {\r\n            keybindings: Keybinding[]; // doc-level array / list / collection\r\n        }\r\n\r\n    } // namespace _keybindings_\r\n\r\n    /**\r\n     * @namespace _extensions_\r\n     * @description The `extensions.json` file is used to store the list of\r\n     * user extensions. It is located in the following directories:\r\n     * - `~/.vscode/extensions/extensions.json`\r\n     * - `<userDataDir>/User/profiles/<profileId>/extensions.json`\r\n     * - `<userDataDir>/User/sync/[<profileId>/]extensions/lastSyncextensions.json`\r\n     */\r\n    export namespace _extensions_ {\r\n\r\n        export interface ExtensionsJson {\r\n            extensions: Extension[]; // doc-level array / list / collection\r\n        }\r\n\r\n        export interface ExtensionIdentifier {\r\n            id: string; // 'publisher.extension-name' style, lowercase\r\n            uuid: string; // uuid\r\n        }\r\n\r\n        export interface ExtensionLocation {\r\n            $mid: number; // always 1 ?\r\n            path: string; // `/c:/Users/..` style\r\n            scheme: string; // always 'file' ?\r\n            _sep?: number; // always 1 when present\r\n            fsPath?: string; // native style when present `\"c:\\\\Users\\\\..`\r\n            external?: string; // uri style when present `\"file:///c%3A/Users/..`\r\n        }\r\n\r\n        export interface ExtensionMetadata {\r\n            id: string; // uuid\r\n            publisherId: string; // uuid\r\n            publisherDisplayName: string;\r\n            targetPlatform: string; // 'undefined' | 'win32-x64'\r\n            updated: boolean;\r\n            isPreReleaseVersion: boolean;\r\n            hasPreReleaseVersion: boolean;\r\n            installedTimestamp: number; // epoch number\r\n            isApplicationScoped?: boolean; // either when present\r\n            preRelease?: boolean; // either when present\r\n            pinned?: boolean; // mostly false when present\r\n            source?: string; // always 'gallery' ?\r\n        }\r\n\r\n        export interface Extension {\r\n            identifier: ExtensionIdentifier;\r\n            version: string; // always /\\d+\\.\\d+\\.\\d+/ style\r\n            location: ExtensionLocation;\r\n            relativeLocation: string; // always 'publisher.extension-name-1.2.3' style\r\n            metadata: ExtensionMetadata;\r\n        }\r\n\r\n    } // namespace _extensions_\r\n\r\n} // namespace _encapsulated_\r\n\r\n\r\n// > The precedence of settings in Visual Studio Code from highest to lowest is\r\n// > as follows:\r\n// >\r\n// > 1. Folder Settings: These settings are stored in a .vscode folder within the\r\n// > workspace folder. They only apply to the specific folder and override any\r\n// > other settings. They're useful in multi-root workspaces where you might need\r\n// > different settings for different parts of your project.\r\n// >\r\n// > 1. Workspace Settings: These settings are stored in the workspace file\r\n// > (.code-workspace) and apply to the entire workspace. They override user\r\n// > settings but are overridden by folder settings in multi-root workspaces.\r\n// >\r\n// > 1. Profile Settings: Profile settings are a relatively newer concept and\r\n// > allow users to have different sets of configurations (which include user\r\n// > settings, extensions, and UI state) tailored for specific tasks or projects.\r\n// > The exact precedence of profile settings can be nuanced, as they\r\n// > essentially provide a new set of user settings. When you're within a\r\n// > specific profile, its settings act as your \"user settings\" for the context\r\n// > of that profile, effectively placing them at the same level as user\r\n// > settings but isolated to the profile context.\r\n// >\r\n// > 1. User Settings: These are global settings that apply to all instances\r\n// > of VS Code across all workspaces and folders, unless overridden by\r\n// > higher-precedence settings. They are stored in the user's home directory.\r\n// >\r\n// > When you configure settings in VS Code, it's important to consider this\r\n// > hierarchy to ensure that your configurations behave as expected. Folder\r\n// > settings have the highest precedence, allowing for fine-grained control\r\n// > over specific parts of your projects, followed by workspace settings\r\n// > that apply to the entire workspace. Profile settings allow you to\r\n// > switch between different sets of configurations easily, acting at the\r\n// > user level for the selected profile. Lastly, user settings provide a\r\n// > baseline that applies universally across your workspaces unless\r\n// > specifically overridden."],"names":["USER_DATA_DIR_WINDO","USER_DATA_DIR_LINUX","USER_DATA_DIR_MACOS","EXTENSIONS_DIR_WINDO","EXTENSIONS_DIR_LINUX","EXTENSIONS_DIR_MACOS","Part","objectFromEnum","part","enum_","default_","result","Object","entries","forEach","name","value","isNaN","Number","key","toString","XVS","DefaultDirs","UserData","Windows","Linux","Mac","Extensions","OnFailReturn","RuntimeEnv","SupportedEnv","Directory","getRuntimeEnv","vscode","env","uiKind","UIKind","Web","process","platform","_getDefaultUserDataDir_","runtimeEnv","onFailCb","Error","_getDefaultExtensionsDir_","_resolveRelativePath_","inputPath","resolvedPath","replace","os","homedir","_","path","resolve","error","getDefaultUserDataDirOrNull","_original","console","getDefaultExtensionsDirOrNull","resolveRelativePathOrNull","getUserDataDirResolvedOrNull","getExtensionsDirResolvedOrNull","FilePaths","_initial","from","join","initial","resolved","_dir","keybindingsJson","tasksJson","settingsJson","globalStateJson","storageJson","profilesDir"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}