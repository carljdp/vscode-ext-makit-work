{"version":3,"sources":["../../../src/system/readNonPublicJsonFiles.ts"],"sourceRoot":"./","sourcesContent":["\r\n\r\nimport * as vscode from 'vscode';\r\n\r\nimport * as path from 'path';\r\n\r\n\r\nimport * as jsoncParser from 'jsonc-parser';\r\n\r\nimport { existsSync } from 'fs';\r\nimport { readFile } from 'fs/promises';\r\n\r\nimport { FileHandler } from '../utils/FileHandler';\r\n\r\n// code --list-extensions --show-versions\r\n// format: publisher.name@version\r\n//  - allowed characters: [a-z0-9-]\r\n//  - first & last character: [a-z]\r\n\r\n\r\ninterface MyData {\r\n    key: string;\r\n    value: number;\r\n}\r\n\r\nfunction validateData(data: any): data is MyData {\r\n    return 'key' in data && 'value' in data;\r\n}\r\n\r\nconst filePath = path.join(__dirname, 'data', 'file.json');\r\n\r\nexport enum OnFail {\r\n    LogAndReturnNull,\r\n    ThrowError\r\n}\r\n\r\nasync function readJsonFile(filePath: string, fileEncoding: BufferEncoding = 'utf8', onFail: OnFail = OnFail.LogAndReturnNull): Promise<any> {\r\n    try {\r\n        const fileData = await readFile(filePath, fileEncoding);\r\n\r\n        let jsonParseErrors: jsoncParser.ParseError[] = [];\r\n        const parsedJson = jsoncParser.parse(fileData, jsonParseErrors, {\r\n            disallowComments: false,\r\n            allowTrailingComma: true,\r\n            allowEmptyContent: true,\r\n        });\r\n\r\n        // Check if there were any errors during parsing\r\n        if (jsonParseErrors.length === 0) {\r\n            return parsedJson;\r\n        } else {\r\n            if (onFail === OnFail.ThrowError) {\r\n                throw new Error('JSONC parsing errors');\r\n            }\r\n            else {\r\n                console.error('JSONC parsing errors:', jsonParseErrors);\r\n                return null;\r\n            }\r\n        }\r\n    } catch (error) {\r\n        if (onFail === OnFail.ThrowError) {\r\n            throw error; // Rethrow back to the caller\r\n        }\r\n        else {\r\n            console.error('Failed to read or parse JSON file:', error);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nasync function getJsonData(onFail: OnFail = OnFail.LogAndReturnNull) {\r\n    try {\r\n        const jsonData = await readJsonFile(filePath, 'utf8', onFail);\r\n        if (!validateData(jsonData)) {\r\n            if (onFail === OnFail.ThrowError) {\r\n                throw new Error('Invalid JSON format');\r\n            }\r\n            else {\r\n                console.error('Invalid JSON format');\r\n                return null;\r\n            }\r\n        }\r\n        return jsonData;\r\n    } catch (error) {\r\n        if (onFail === OnFail.ThrowError) {\r\n            throw error; // Rethrow back to the caller\r\n        }\r\n        else {\r\n            console.error('Failed to get JSON data:', error);\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nfunction readExtensionsJson() {\r\n    const workspaceFolders = vscode.workspace.workspaceFolders;\r\n\r\n    if (!workspaceFolders) {\r\n        console.log('No workspace is open.');\r\n        return;\r\n    }\r\n\r\n    // Assuming you want to read extensions.json from the first workspace folder\r\n    const workspacePath = workspaceFolders[0].uri.fsPath;\r\n    const extensionsJsonPath = path.join(workspacePath, '.vscode', 'extensions.json');\r\n\r\n    // Check if extensions.json exists\r\n    if (existsSync(extensionsJsonPath)) {\r\n\r\n        const fileContent = FileHandler.initOnce({\r\n            lockFileOptions: {},\r\n        }).cautiousReadFile(extensionsJsonPath);\r\n\r\n        // readFile(extensionsJsonPath, 'utf8', (err, data) => {\r\n        //     if (err) {\r\n        //         console.error('Error reading extensions.json:', err);\r\n        //         return;\r\n        //     }\r\n\r\n        //     try {\r\n        //         const extensionsJson = JSON.parse(data);\r\n        //         console.log('extensions.json content:', extensionsJson);\r\n        //         // Now you can work with the extensionsJson object\r\n        //     } catch (parseError) {\r\n        //         console.error('Error parsing extensions.json:', parseError);\r\n        //     }\r\n        // });\r\n\r\n    } else {\r\n        console.log('extensions.json does not exist.');\r\n    }\r\n}\r\n\r\n// Example usage\r\nreadExtensionsJson();\r\n"],"names":["validateData","data","filePath","path","join","__dirname","OnFail","readJsonFile","fileEncoding","onFail","fileData","readFile","jsonParseErrors","parsedJson","jsoncParser","parse","disallowComments","allowTrailingComma","allowEmptyContent","length","Error","console","error","getJsonData","jsonData","readExtensionsJson","workspaceFolders","vscode","workspace","log","workspacePath","uri","fsPath","extensionsJsonPath","existsSync","fileContent","FileHandler","initOnce","lockFileOptions","cautiousReadFile"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;;;;;;;gEAEwB;8DAEF;qEAGO;oBAEF;0BACF;6BAEG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAa5B,SAASA,aAAaC,IAAS;IAC3B,OAAO,SAASA,QAAQ,WAAWA;AACvC;AAEA,MAAMC,WAAWC,MAAKC,IAAI,CAACC,WAAW,QAAQ;;UAElCC;;;GAAAA,WAAAA;AAKZ,eAAeC,aAAaL,QAAgB,EAAEM,eAA+B,MAAM,EAAEC,UAAwC;IACzH,IAAI;QACA,MAAMC,WAAW,MAAMC,IAAAA,kBAAQ,EAACT,UAAUM;QAE1C,IAAII,kBAA4C,EAAE;QAClD,MAAMC,aAAaC,aAAYC,KAAK,CAACL,UAAUE,iBAAiB;YAC5DI,kBAAkB;YAClBC,oBAAoB;YACpBC,mBAAmB;QACvB;QAEA,gDAAgD;QAChD,IAAIN,gBAAgBO,MAAM,KAAK,GAAG;YAC9B,OAAON;QACX,OAAO;YACH,IAAIJ,cAA8B;gBAC9B,MAAM,IAAIW,MAAM;YACpB,OACK;gBACDC,QAAQC,KAAK,CAAC,yBAAyBV;gBACvC,OAAO;YACX;QACJ;IACJ,EAAE,OAAOU,OAAO;QACZ,IAAIb,cAA8B;YAC9B,MAAMa,OAAO,6BAA6B;QAC9C,OACK;YACDD,QAAQC,KAAK,CAAC,sCAAsCA;YACpD,OAAO;QACX;IACJ;AACJ;AAEA,eAAeC,YAAYd,UAAwC;IAC/D,IAAI;QACA,MAAMe,WAAW,MAAMjB,aAAaL,UAAU,QAAQO;QACtD,IAAI,CAACT,aAAawB,WAAW;YACzB,IAAIf,cAA8B;gBAC9B,MAAM,IAAIW,MAAM;YACpB,OACK;gBACDC,QAAQC,KAAK,CAAC;gBACd,OAAO;YACX;QACJ;QACA,OAAOE;IACX,EAAE,OAAOF,OAAO;QACZ,IAAIb,cAA8B;YAC9B,MAAMa,OAAO,6BAA6B;QAC9C,OACK;YACDD,QAAQC,KAAK,CAAC,4BAA4BA;YAC1C,OAAO;QACX;IACJ;AACJ;AAKA,SAASG;IACL,MAAMC,mBAAmBC,QAAOC,SAAS,CAACF,gBAAgB;IAE1D,IAAI,CAACA,kBAAkB;QACnBL,QAAQQ,GAAG,CAAC;QACZ;IACJ;IAEA,4EAA4E;IAC5E,MAAMC,gBAAgBJ,gBAAgB,CAAC,EAAE,CAACK,GAAG,CAACC,MAAM;IACpD,MAAMC,qBAAqB9B,MAAKC,IAAI,CAAC0B,eAAe,WAAW;IAE/D,kCAAkC;IAClC,IAAII,IAAAA,cAAU,EAACD,qBAAqB;QAEhC,MAAME,cAAcC,wBAAW,CAACC,QAAQ,CAAC;YACrCC,iBAAiB,CAAC;QACtB,GAAGC,gBAAgB,CAACN;IAEpB,wDAAwD;IACxD,iBAAiB;IACjB,gEAAgE;IAChE,kBAAkB;IAClB,QAAQ;IAER,YAAY;IACZ,mDAAmD;IACnD,mEAAmE;IACnE,6DAA6D;IAC7D,6BAA6B;IAC7B,uEAAuE;IACvE,QAAQ;IACR,MAAM;IAEV,OAAO;QACHZ,QAAQQ,GAAG,CAAC;IAChB;AACJ;AAEA,gBAAgB;AAChBJ"}