{"version":3,"sources":["../../src/index.ts"],"sourceRoot":"./","sourcesContent":["\r\n\r\nimport * as vscode from 'vscode';\r\nimport * as fs from 'fs';\r\nimport * as jsoncParser from 'jsonc-parser';\r\nimport * as path from 'path';\r\n\r\nimport { Logger, LogSeverity } from './utils/Log';\r\n\r\nimport { getContextName } from './utils/Meta';\r\n\r\nimport { XVS } from './system/vscodeEnvFacade';\r\n\r\n\r\nimport { FileHandler } from './utils/FileHandler';\r\n\r\n\r\nimport { storageService } from './services';\r\n\r\n\r\nimport { threejsWebviewActivate } from './webviewPanel';\r\n\r\n\r\n\r\nconst EXT_AUTH: Readonly<string> = `carljdp`;\r\nconst EXT_NAME: Readonly<string> = `x10shine`;\r\n\r\n\r\n/** The top level file handler for the application. */\r\nconst filehandler = FileHandler.initOnce({\r\n    lockFileOptions: {\r\n        // my arbitrary options '¯\\_(ツ)_/¯'\r\n        retries: 5,\r\n        retryWait: 100\r\n    }\r\n});\r\n\r\nconst root = new Logger({\r\n    scopeLabel: \"\", // or \"ROOT\" \r\n    initialRelativeSeverity: LogSeverity.Debug\r\n});\r\nroot.debug('--start--');\r\n\r\n\r\n/**\r\n * Read and parse a JSONC file.\r\n * @param extensionsJsonPath e.g. '.vscode/extensions.json'\r\n * @param encoding e.g. 'utf8'\r\n * @returns The parsed JSON object or null if there were parsing errors.\r\n * @throws NONE - Errors are logged and returned as null.\r\n */\r\nasync function readAndParseJSONC<T extends object>(extensionsJsonPath: fs.PathLike, encoding: BufferEncoding = 'utf8'): Promise<T | null> {\r\n    try {\r\n\r\n        //  check if the file exists\r\n        if (!fs.existsSync(extensionsJsonPath)) {\r\n            console.info('File does not exist:', extensionsJsonPath);\r\n            return null;\r\n        }\r\n\r\n        const existingFileSize = await storageService.fileSize(extensionsJsonPath as string, '');\r\n        const utf8Buffer: Buffer = Buffer.alloc(existingFileSize);\r\n\r\n        if (! await storageService.readFile(extensionsJsonPath as string, '', utf8Buffer, encoding)) {\r\n            console.error('Error reading the JSONC file:', extensionsJsonPath);\r\n            return null;\r\n        }\r\n        const jsoncFileContent = new TextDecoder().decode(utf8Buffer);\r\n\r\n        const jsoncParseErrors: jsoncParser.ParseError[] = [];\r\n        const json = jsoncParser.parse(jsoncFileContent, jsoncParseErrors, {\r\n            disallowComments: false,\r\n            allowTrailingComma: true,\r\n            allowEmptyContent: true,\r\n        });\r\n\r\n        // Check if there were any errors during parsing\r\n        if (jsoncParseErrors.length === 0) {\r\n            return json as T;\r\n        } else {\r\n            // Handle or log parsing errors\r\n            console.error('JSONC parsing errors:', jsoncParseErrors);\r\n            return null; // or throw new Error('JSONC parsing errors');\r\n        }\r\n    } catch (error) {\r\n        console.error('Error reading the JSONC file:', error);\r\n        return null; // or throw error;\r\n    }\r\n}\r\n\r\nclass ExtensionItem extends vscode.TreeItem {\r\n    constructor(public readonly extension: vscode.Extension<any>, public readonly tag: string) {\r\n        super(extension.id);\r\n\r\n        if (tag.includes('recommended')) {\r\n            this.iconPath = new vscode.ThemeIcon('check');\r\n        }\r\n        else if (tag.includes('unwanted')) {\r\n            this.iconPath = new vscode.ThemeIcon('error');\r\n        }\r\n        else {\r\n            //\r\n        }\r\n\r\n        this.tooltip = `${extension.packageJSON.displayName}`;\r\n    }\r\n}\r\n\r\nclass ExtensionViewProvider implements vscode.TreeDataProvider<ExtensionItem> {\r\n    private _onDidChangeTreeData: vscode.EventEmitter<ExtensionItem | undefined> = new vscode.EventEmitter<ExtensionItem | undefined>();\r\n    readonly onDidChangeTreeData: vscode.Event<ExtensionItem | undefined> = this._onDidChangeTreeData.event;\r\n\r\n    private log: Logger;\r\n\r\n    filter: string;\r\n\r\n    // default constructor\r\n    constructor(fliter: string) {\r\n        this.filter = fliter;\r\n\r\n        this.log = root.subScope({\r\n            scopeLabel: getContextName().replace(/new /, '').concat(`(${this.filter})`),\r\n            initialRelativeSeverity: LogSeverity.Debug\r\n        });\r\n\r\n    }\r\n\r\n\r\n    getTreeItem(element: ExtensionItem): vscode.TreeItem {\r\n        return element;\r\n    }\r\n\r\n    async getChildren(element?: ExtensionItem): Promise<ExtensionItem[]> {\r\n        if (element) {\r\n            return [];\r\n        } else {\r\n            const local = this.log.subScope({});\r\n            local.debug('--start--');\r\n\r\n            // example usage, not used yet\r\n            const vscodeUserDataGlobalStateJsonPath = await XVS.UserData.globalStateJson.resolved;\r\n\r\n\r\n            const workspaceFolderPath = vscode.workspace.workspaceFolders?.[0].uri.fsPath || './';\r\n            const extensionsJsonPath = path.join(workspaceFolderPath, '.vscode', 'extensions.json');\r\n\r\n            local.log('extensionsJsonPath:\\n    ', extensionsJsonPath);\r\n\r\n            type ExtensionsJson = {\r\n                recommendations?: string[];\r\n                unwantedRecommendations?: string[];\r\n            };\r\n\r\n            const vscodeFolderExtensions = await readAndParseJSONC<ExtensionsJson>(extensionsJsonPath);\r\n\r\n            const recommendations = vscodeFolderExtensions?.recommendations || [];\r\n\r\n            const unwantedRecommendations = vscodeFolderExtensions?.unwantedRecommendations || [];\r\n\r\n            const allKnownExtensions = vscode.extensions.all;\r\n\r\n            let extensionItems: ExtensionItem[] = [];\r\n\r\n            if (this.filter === 'wanted') {\r\n                local.debug('wanted');\r\n\r\n                extensionItems = allKnownExtensions\r\n                    .filter(ext => recommendations.includes(ext.id))\r\n                    .map((ext) => {\r\n                        let tag = '';\r\n\r\n                        if (recommendations.includes(ext.id)) {\r\n                            tag = 'recommended';\r\n                        } else if (unwantedRecommendations.includes(ext.id)) {\r\n                            tag = 'unwanted';\r\n                        } else {\r\n                            tag = 'unknown';\r\n                        }\r\n\r\n                        return new ExtensionItem(ext, tag);\r\n                    });\r\n            }\r\n\r\n            if (this.filter === 'unwanted') {\r\n                local.debug('unwanted');\r\n\r\n                extensionItems = allKnownExtensions\r\n                    .filter(ext => unwantedRecommendations.includes(ext.id))\r\n                    .map((ext) => {\r\n                        let tag = '';\r\n\r\n                        if (recommendations.includes(ext.id)) {\r\n                            tag = 'recommended';\r\n                        } else if (unwantedRecommendations.includes(ext.id)) {\r\n                            tag = 'unwanted';\r\n                        } else {\r\n                            tag = 'unknown';\r\n                        }\r\n\r\n                        return new ExtensionItem(ext, tag);\r\n                    });\r\n            }\r\n\r\n            if (this.filter === 'dontCare') {\r\n                local.debug('dontCare');\r\n\r\n                extensionItems = allKnownExtensions\r\n                    .filter(ext => !recommendations.includes(ext.id) && !unwantedRecommendations.includes(ext.id))\r\n                    .filter(ext => !ext.packageJSON.isBuiltin)\r\n                    .map((ext) => {\r\n                        let tag = '';\r\n\r\n                        if (recommendations.includes(ext.id)) {\r\n                            tag = 'recommended';\r\n                        } else if (unwantedRecommendations.includes(ext.id)) {\r\n                            tag = 'unwanted';\r\n                        } else {\r\n                            tag = 'unknown';\r\n                        }\r\n\r\n                        return new ExtensionItem(ext, tag);\r\n                    });\r\n            }\r\n\r\n\r\n            // extensionItems = allKnownExtensions\r\n            //     .filter(ext => !ext.packageJSON.isBuiltin)\r\n            //     .map((ext) => {\r\n            //         let tag = '';\r\n\r\n            //         if (recommendations.includes(ext.id)) {\r\n            //             tag = 'recommended';\r\n            //         } else if (unwantedRecommendations.includes(ext.id)) {\r\n            //             tag = 'unwanted';\r\n            //         } else {\r\n            //             tag = 'unknown';\r\n            //         }\r\n\r\n            //         return new ExtensionItem(ext, tag);\r\n            //     });\r\n\r\n            local.debug('---end---');\r\n            return extensionItems;\r\n        }\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n// Define the function to return your webview content\r\nfunction getWebviewContent() {\r\n    return `\r\n    <!DOCTYPE html>\r\n    <html lang=\"en\">\r\n    <head>\r\n      <meta charset=\"UTF-8\">\r\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n      <title>Custom Webview</title>\r\n    </head>\r\n    <body>\r\n      <h1>Hello, World!</h1>\r\n    </body>\r\n    </html>\r\n  `;\r\n}\r\n\r\nlet currentPanel: vscode.WebviewPanel | undefined = undefined;\r\n\r\n// pseudo 'init'\r\nexport function activate(context: vscode.ExtensionContext) {\r\n    const log = root.subScope({ scopeLabel: getContextName() });\r\n    log.debug('--start--');\r\n    log.indent();\r\n\r\n    context.subscriptions.push(vscode.window.registerTreeDataProvider(\r\n        `${EXT_NAME}.extMan.view.wanted`, new ExtensionViewProvider('wanted')));\r\n\r\n    context.subscriptions.push(vscode.window.registerTreeDataProvider(\r\n        `${EXT_NAME}.extMan.view.unwanted`, new ExtensionViewProvider('unwanted')));\r\n\r\n    context.subscriptions.push(vscode.window.registerTreeDataProvider(\r\n        `${EXT_NAME}.extMan.view.dontCare`, new ExtensionViewProvider('dontCare')));\r\n\r\n    // In the activate function\r\n    context.subscriptions.push(vscode.commands.registerCommand(\r\n        `${EXT_NAME}.extMan.navigateToExtension`,\r\n        (item: ExtensionItem) => {\r\n            const _log = log.subScope({ scopeLabel: `${EXT_NAME}.extMan.navigateToExtension` });\r\n            _log.debug('--start--');\r\n\r\n            // fornow: view the extension info in the extension view\r\n            vscode.commands.executeCommand('workbench.extensions.action.showExtension', item.extension.id);\r\n\r\n\r\n\r\n\r\n            _log.debug('---end---');\r\n        }\r\n    ));\r\n\r\n    // In the activate function\r\n    context.subscriptions.push(vscode.commands.registerCommand(\r\n        `${EXT_NAME}.enableExtension`,\r\n        (item: ExtensionItem) => {\r\n            const _log = log.subScope({ scopeLabel: 'enableExtension' });\r\n            _log.debug('--start--');\r\n\r\n            // TODO: Enable the extension\r\n            _log.info('Enabling extension:', item.extension.id);\r\n\r\n            _log.debug('---end---');\r\n        }\r\n    ));\r\n\r\n    context.subscriptions.push(vscode.commands.registerCommand(\r\n        `${EXT_NAME}.disableExtension`,\r\n        (item: ExtensionItem) => {\r\n            const _log = log.subScope({ scopeLabel: 'disableExtension' });\r\n            _log.debug('--start--');\r\n\r\n            // TODO: Disable the extension\r\n            _log.info('Enabling extension:', item.extension.id);\r\n\r\n            _log.debug('---end---');\r\n        }\r\n    ));\r\n\r\n    // can export a public API here, available to other extensions\r\n    let publicApi = {\r\n        sum(a: number, b: number): number {\r\n            return a + b;\r\n        },\r\n        mul(a: number, b: number): number {\r\n            return a * b;\r\n        }\r\n    };\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    context.subscriptions.push(vscode.commands.registerCommand('x10shine-webviewPanel1', () => {\r\n        if (currentPanel) {\r\n            // If we already have a panel, show it.\r\n            currentPanel.reveal(vscode.ViewColumn.One);\r\n        } else {\r\n            // Otherwise, create a new panel.\r\n            currentPanel = vscode.window.createWebviewPanel(\r\n                'customWebView',\r\n                'Custom Webview',\r\n                {\r\n                    viewColumn: vscode.ViewColumn.One,\r\n                    preserveFocus: true\r\n                },\r\n                {\r\n                    enableScripts: true\r\n                }\r\n            );\r\n\r\n            currentPanel.webview.html = getWebviewContent();\r\n\r\n            currentPanel.onDidDispose(\r\n                () => {\r\n                    // When the panel is closed, set the currentPanel to undefined\r\n                    currentPanel = undefined;\r\n                },\r\n                null,\r\n                context.subscriptions\r\n            );\r\n        }\r\n    }));\r\n\r\n    // If your webview should open on workspace load, you can call the command directly here\r\n    // vscode.commands.executeCommand('x10shine-webviewPanel1');\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n\r\n    threejsWebviewActivate(context);\r\n\r\n\r\n    // ------------------------------------------------------------------------\r\n\r\n    log.unindent();\r\n    log.debug('---end---');\r\n\r\n    // 'export' public api-surface\r\n    return publicApi;\r\n}\r\n\r\n// pseudo 'deinit'\r\nexport function deactivate() {\r\n    const log = root.subScope({ scopeLabel: getContextName() });\r\n    log.debug('--start--');\r\n    log.indent();\r\n\r\n    log.unindent();\r\n    log.debug('---end---');\r\n}\r\n\r\n\r\nroot.debug('---end---');"],"names":["activate","deactivate","EXT_AUTH","EXT_NAME","filehandler","FileHandler","initOnce","lockFileOptions","retries","retryWait","root","Logger","scopeLabel","initialRelativeSeverity","LogSeverity","Debug","debug","readAndParseJSONC","extensionsJsonPath","encoding","fs","existsSync","console","info","existingFileSize","storageService","fileSize","utf8Buffer","Buffer","alloc","readFile","error","jsoncFileContent","TextDecoder","decode","jsoncParseErrors","json","jsoncParser","parse","disallowComments","allowTrailingComma","allowEmptyContent","length","ExtensionItem","vscode","TreeItem","constructor","extension","tag","id","includes","iconPath","ThemeIcon","tooltip","packageJSON","displayName","ExtensionViewProvider","_onDidChangeTreeData","EventEmitter","onDidChangeTreeData","event","log","filter","fliter","subScope","getContextName","replace","concat","getTreeItem","element","getChildren","local","vscodeUserDataGlobalStateJsonPath","XVS","UserData","globalStateJson","resolved","workspaceFolderPath","workspace","workspaceFolders","uri","fsPath","path","join","vscodeFolderExtensions","recommendations","unwantedRecommendations","allKnownExtensions","extensions","all","extensionItems","ext","map","isBuiltin","getWebviewContent","currentPanel","undefined","context","indent","subscriptions","push","window","registerTreeDataProvider","commands","registerCommand","item","_log","executeCommand","publicApi","sum","a","b","mul","reveal","ViewColumn","One","createWebviewPanel","viewColumn","preserveFocus","enableScripts","webview","html","onDidDispose","threejsWebviewActivate","unindent"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}