{"version":3,"sources":["../../src/webviewPanel.ts"],"sourceRoot":"./","sourcesContent":["import * as vscode from 'vscode';\r\n\r\nimport crypto from 'node:crypto';\r\n\r\nimport { join, basename, sep, relative, resolve } from 'node:path';\r\n\r\nimport { _isProd_, _isDev_, _isDebug_ } from './dev/EnvConf.js';\r\n\r\n\r\nimport AppConf from './dev/AppConf.js';\r\nimport assert from 'node:assert';\r\n\r\nconst __extensionId = `${AppConf.APP_PUBL}.${AppConf.APP_NAME}`;\r\nconst __extension = vscode.extensions.getExtension(__extensionId) || undefined;\r\nif (__extension === undefined) {\r\n    throw new Error(`Extension with id '${__extensionId}' not found`);\r\n}\r\n\r\nconst normalizeDriveLetter = (path: string) => {\r\n    const driveLetterRegex = /^\\/?[a-z]:?(?=(\\\\{1,2}|\\/))/;\r\n    const match = path.match(driveLetterRegex);\r\n    if (match) {\r\n        const upper = match[0].toUpperCase();\r\n        return path.replace(driveLetterRegex, upper);\r\n    }\r\n    return path;\r\n};\r\n\r\nconst __extensionUri = __extension.extensionUri;\r\nconst _absExtensRoot = resolve(vscode.Uri.parse(String(__extensionUri)).fsPath);\r\nconst _absProjRoot = resolve(AppConf.PROJ_ROOT_ABS_PATH);\r\n// const _relativePath = relative(_absExtensRoot, _absProjRoot);\r\n// const relativeParts = _relativePath.split(sep);\r\n\r\n\r\nassert.equal(normalizeDriveLetter(_absExtensRoot), normalizeDriveLetter(_absProjRoot), 'WebviewPanel: Context path is not the same as project root path');\r\n\r\nconst relativePaths = {\r\n    srcWebapp: join(AppConf.APP_ROOT_SRC_DIR, AppConf.APP_WEBAPP_SRC_DIR),\r\n    distWebapp: join(AppConf.APP_ROOT_OUT_DIR, AppConf.APP_WEBAPP_OUT_DIR),\r\n    distVendor: join(AppConf.APP_ROOT_OUT_DIR, AppConf.APP_VENDOR_OUT_DIR)\r\n};\r\n\r\nif (_isDebug_) {\r\n    console.log('[webview/index.ts] resourcePath:')\r\n    console.table([\r\n        { var: 'resourcePath.srcWebapp', value: relativePaths.srcWebapp },\r\n        { var: 'resourcePath.distWebapp', value: relativePaths.distWebapp },\r\n        { var: 'resourcePath.distVendor', value: relativePaths.distVendor }\r\n    ])\r\n}\r\n\r\n\r\nclass ThreeJsWebviewPanel {\r\n\r\n    private static getNonce() {\r\n        return crypto.randomBytes(16).toString('hex');\r\n    }\r\n\r\n    public static currentPanel: ThreeJsWebviewPanel | undefined;\r\n\r\n    public static readonly viewType = 'webviewPanel3';\r\n\r\n    public static readonly subscriptions: Record<string, (context: vscode.ExtensionContext) => vscode.Disposable> = {\r\n        start: (context: vscode.ExtensionContext) => vscode.commands.registerCommand(\r\n            'x10shine-webviewPanel3', () => {\r\n                ThreeJsWebviewPanel.createOrShow(context.extensionUri);\r\n            })\r\n    };\r\n\r\n    public static getWebviewOptions(extensionUri: vscode.Uri): vscode.WebviewOptions {\r\n        return {\r\n            // Enable javascript in the webview\r\n            enableScripts: true,\r\n\r\n            // localResourceRoots: [\r\n            //     vscode.Uri.joinPath(extensionUri, relativePaths.srcWebapp),\r\n            //     vscode.Uri.joinPath(extensionUri, relativePaths.distWebapp),\r\n            //     vscode.Uri.joinPath(extensionUri, relativePaths.distVendor),\r\n            // ],\r\n        };\r\n    }\r\n\r\n    public static createOrShow(extensionUri: vscode.Uri) {\r\n        const column = vscode.window.activeTextEditor\r\n            ? vscode.window.activeTextEditor.viewColumn\r\n            : undefined;\r\n\r\n        // If we already have a panel, show it.\r\n        if (ThreeJsWebviewPanel.currentPanel) {\r\n            ThreeJsWebviewPanel.currentPanel._panel.reveal(column);\r\n            return;\r\n        }\r\n\r\n        // Otherwise, create a new panel.\r\n        const panel = vscode.window.createWebviewPanel(\r\n            ThreeJsWebviewPanel.viewType, // type\r\n            ThreeJsWebviewPanel.viewType, // title\r\n            {\r\n                viewColumn: column || vscode.ViewColumn.One,\r\n                preserveFocus: true\r\n            },\r\n            ThreeJsWebviewPanel.getWebviewOptions(extensionUri),\r\n        );\r\n\r\n        ThreeJsWebviewPanel.revive(panel, extensionUri);\r\n    }\r\n\r\n    public static revive(panel: vscode.WebviewPanel, extensionUri: vscode.Uri) {\r\n        ThreeJsWebviewPanel.currentPanel = new ThreeJsWebviewPanel(panel, extensionUri);\r\n    }\r\n\r\n\r\n    private readonly _panel: vscode.WebviewPanel;\r\n\r\n    private readonly _extensionUri: vscode.Uri;\r\n\r\n    private _disposables: vscode.Disposable[] = [];\r\n\r\n\r\n    private constructor(panel: vscode.WebviewPanel, extensionUri: vscode.Uri) {\r\n        this._panel = panel;\r\n        this._extensionUri = extensionUri;\r\n\r\n        // Set the webview's initial html content\r\n        this._update();\r\n\r\n        // Listen for when the panel is disposed\r\n        // This happens when the user closes the panel or when the panel is closed programmatically\r\n        this._panel.onDidDispose(() => this.dispose(), null, this._disposables);\r\n\r\n        // Update the content based on view changes\r\n        this._panel.onDidChangeViewState(\r\n            event => {\r\n                console.log(`Webview panel changed state to ${event.webviewPanel.visible ? 'visible' : 'hidden'}`);\r\n                console.log(`    WebviewPanel Event:\\n`, event);\r\n                if (this._panel.visible) {\r\n                    this._update();\r\n                }\r\n            },\r\n            null,\r\n            this._disposables\r\n        );\r\n\r\n    }\r\n\r\n    public dispose() {\r\n        ThreeJsWebviewPanel.currentPanel = undefined;\r\n\r\n        // Clean up our resources\r\n        this._panel.dispose();\r\n\r\n        while (this._disposables.length) {\r\n            const x = this._disposables.pop();\r\n            if (x) {\r\n                x.dispose();\r\n            }\r\n        }\r\n    }\r\n\r\n    private _update() {\r\n        console.log('Updating webview content');\r\n\r\n        const webview = this._panel.webview;\r\n\r\n        // Vary the webview's content based on where it is located in the editor.\r\n        switch (this._panel.viewColumn) {\r\n            case vscode.ViewColumn.Two:\r\n                this._updateForImg(webview);\r\n                return;\r\n\r\n            case vscode.ViewColumn.Three:\r\n                this._updateForImg(webview);\r\n                return;\r\n\r\n            case vscode.ViewColumn.One:\r\n            default:\r\n                this._updateForImg(webview);\r\n                return;\r\n        }\r\n    }\r\n\r\n    private _updateForImg(webview: vscode.Webview) {\r\n        this._panel.title = ThreeJsWebviewPanel.viewType\r\n        this._panel.webview.html = this._getHtmlForWebview(webview);\r\n    }\r\n\r\n    private _getHtmlForWebview(webview: vscode.Webview) {\r\n\r\n        // TODO: should the 'dist' bpart rather be configured in webpack?\r\n        const webappPathOnDisk = vscode.Uri.joinPath(this._extensionUri, relativePaths.distWebapp);\r\n        const vendorPathOnDisk = vscode.Uri.joinPath(this._extensionUri, relativePaths.distVendor);\r\n\r\n        // temp hack\r\n        const pathToSrcCss = vscode.Uri.joinPath(this._extensionUri, relativePaths.srcWebapp);\r\n\r\n        const threeJsScriptUri = webview.asWebviewUri(vscode.Uri.joinPath(\r\n            vendorPathOnDisk, 'three/build/three.cjs'));\r\n        const OrbitControlsScriptUri = webview.asWebviewUri(vscode.Uri.joinPath(\r\n            vendorPathOnDisk, 'three/examples/jsm/controls/OrbitControls.js'));\r\n\r\n        const mainJsScriptUri = webview.asWebviewUri(vscode.Uri.joinPath(webappPathOnDisk, 'index.js'));\r\n\r\n        // const mainCssUri = webview.asWebviewUri(vscode.Uri.joinPath(webappPathOnDisk, 'main.css'));\r\n        const mainCssUri = webview.asWebviewUri(vscode.Uri.joinPath(pathToSrcCss, 'main.css'));\r\n\r\n        // Use a nonce to only allow specific scripts to be run\r\n        const nonce = ThreeJsWebviewPanel.getNonce();\r\n\r\n\r\n        console.table({\r\n            threeJsScriptUri,\r\n            OrbitControlsScriptUri,\r\n            mainJsScriptUri,\r\n            mainCssUri,\r\n            nonce\r\n        });\r\n\r\n\r\n        const csp = {\r\n            defaultSrc: `default-src 'none';`,\r\n            styleSrc: `style-src ${webview.cspSource} 'nonce-${nonce}';`,\r\n            scriptSrc: `script-src ${webview.cspSource} 'unsafe-eval' 'nonce-${nonce}';`,\r\n            imgSrc: `img-src ${webview.cspSource} https:;`,\r\n        };\r\n\r\n        return `<!DOCTYPE html>\r\n\t\t\t<html lang=\"en\">\r\n\t\t\t<head>\r\n            \r\n                <!--\r\n                Use a content security policy to only allow loading images from https or from our extension directory,\r\n                and only allow scripts that have a specific nonce.\r\n                -->\r\n                <meta http-equiv=\"Content-Security-Policy\" content=\"${csp.defaultSrc} ${csp.styleSrc} ${csp.scriptSrc} ${csp.imgSrc}\">\r\n            \r\n                <meta charset=\"UTF-8\">\r\n\t\t        <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0\">\r\n\r\n\t\t\t\t<link href=\"${mainCssUri}\" rel=\"stylesheet\" nonce=\"${nonce}\">\r\n\r\n                <style nonce=\"${nonce}\">\r\n                    b {\r\n                        color: lightgreen;\r\n                    }\r\n                </style>\r\n\r\n\t\t\t\t<title>${ThreeJsWebviewPanel.viewType}</title>\r\n\r\n\t\t\t</head>\r\n\t\t\t<body>\r\n\r\n                <div id=\"info\"><a href=\"https://threejs.org\" target=\"_blank\" rel=\"noopener\">three.js</a> - cameras<br/>\r\n                <b>O</b> orthographic <b>P</b> perspective\r\n                </div>\r\n\r\n                <script type=\"importmap\" nonce=\"${nonce}\">\r\n                    {\r\n                        \"imports\": {\r\n                            \"three\": \"${threeJsScriptUri}\",\r\n                            \"OrbitControls\": \"${OrbitControlsScriptUri}\"\r\n                        }\r\n                    }\r\n                </script>\r\n\r\n\t\t\t\t<script type=\"module\" src=\"${mainJsScriptUri}\" nonce=\"${nonce}\"></script>\r\n\r\n\t\t\t</body>\r\n\t\t\t</html>`;\r\n    }\r\n}\r\n\r\n// ============================================================================\r\n\r\nfunction threejsWebviewActivate(context: vscode.ExtensionContext) {\r\n    context.subscriptions.push(ThreeJsWebviewPanel.subscriptions.start(context));\r\n\r\n    if (vscode.window.registerWebviewPanelSerializer) {\r\n        // Make sure we register a serializer in activation event\r\n        vscode.window.registerWebviewPanelSerializer(ThreeJsWebviewPanel.viewType, {\r\n            async deserializeWebviewPanel(webviewPanel: vscode.WebviewPanel, state: unknown) {\r\n                console.log(`Got state: ${state}`);\r\n                // Reset the webview options so we use latest uri for `localResourceRoots`.\r\n                webviewPanel.webview.options = ThreeJsWebviewPanel.getWebviewOptions(context.extensionUri);\r\n                ThreeJsWebviewPanel.revive(webviewPanel, context.extensionUri);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexport { threejsWebviewActivate };"],"names":["threejsWebviewActivate","__extensionId","AppConf","APP_PUBL","APP_NAME","__extension","vscode","extensions","getExtension","undefined","Error","normalizeDriveLetter","path","driveLetterRegex","match","upper","toUpperCase","replace","__extensionUri","extensionUri","_absExtensRoot","resolve","Uri","parse","String","fsPath","_absProjRoot","PROJ_ROOT_ABS_PATH","assert","equal","relativePaths","srcWebapp","join","APP_ROOT_SRC_DIR","APP_WEBAPP_SRC_DIR","distWebapp","APP_ROOT_OUT_DIR","APP_WEBAPP_OUT_DIR","distVendor","APP_VENDOR_OUT_DIR","_isDebug_","console","log","table","var","value","ThreeJsWebviewPanel","getNonce","crypto","randomBytes","toString","currentPanel","viewType","subscriptions","start","context","commands","registerCommand","createOrShow","getWebviewOptions","enableScripts","column","window","activeTextEditor","viewColumn","_panel","reveal","panel","createWebviewPanel","ViewColumn","One","preserveFocus","revive","_extensionUri","_disposables","_update","onDidDispose","dispose","onDidChangeViewState","event","webviewPanel","visible","length","x","pop","webview","Two","_updateForImg","Three","title","html","_getHtmlForWebview","webappPathOnDisk","joinPath","vendorPathOnDisk","pathToSrcCss","threeJsScriptUri","asWebviewUri","OrbitControlsScriptUri","mainJsScriptUri","mainCssUri","nonce","csp","defaultSrc","styleSrc","cspSource","scriptSrc","imgSrc","push","registerWebviewPanelSerializer","deserializeWebviewPanel","state","options"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":"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"}