{"version":3,"sources":["../../../src/common/Registry.ts"],"sourceRoot":"./","sourcesContent":["\r\n\r\nimport { IOrigin, Origin } from './Origin';\r\nimport { Singleton } from './Singleton';\r\n\r\n\r\ninterface IRegistry<T extends Singleton> extends Singleton {\r\n\r\n    // members common to all registries\r\n\r\n    registerOfItems: Readonly<Map<Symbol, T>>;\r\n\r\n    register(instance: T): Symbol;\r\n\r\n    getAs<U extends Singleton>(this: Registry<T>, key: Symbol): U\r\n\r\n}\r\n\r\n\r\nclass Registry<T extends Singleton> extends Singleton implements IRegistry<T> {\r\n\r\n    // implementation common to all registries\r\n\r\n    public constructor() {\r\n        super();\r\n        this.instanceKey = Symbol.for(`AbstractRegistry`);\r\n    }\r\n\r\n    public registerOfItems: Readonly<Map<Symbol, T>> = new Map<Symbol, T>();\r\n\r\n    public register(this: Registry<T>, instance: T): Symbol {\r\n        this.instanceDebug(`Adding a '${instance.constructor.name}' with key '${instance.instanceKey.toString()}'`);\r\n\r\n        if (this.registerOfItems.has(instance.instanceKey)) {\r\n            throw this.instanceError('addToRegister', 'add instance',\r\n                new Error(`An instance with the same key '${instance.instanceKey.toString()}' already exists, ` +\r\n                    `try using a different key.`\r\n                ));\r\n        }\r\n\r\n        this.registerOfItems.set(instance.instanceKey, instance);\r\n        this.instanceDebug(`Added a '${instance.constructor.name}' with key '${instance.instanceKey.toString()}'`);\r\n        return instance.instanceKey;\r\n    }\r\n\r\n    public getAs<U extends Singleton>(this: Registry<T>, key: Symbol): U {\r\n        this.instanceDebug(`Get the object where key '${key.toString()}'`);\r\n\r\n        if (!this.registerOfItems.has(key)) {\r\n            throw this.instanceError('getAs<>', 'find instance with key',\r\n                new Error(`No instance with key '${key.toString()}' in the registry, ` +\r\n                    `try adding an instance first.`\r\n                ));\r\n        }\r\n\r\n        const instance = (this.registerOfItems.get(key) as any & U) as U;\r\n        this.instanceDebug(`Returning '${instance.constructor.name}' with key '${instance.instanceKey.toString()}'`);\r\n        return instance;\r\n    }\r\n\r\n\r\n}\r\n\r\nexport { IRegistry, Registry };\r\n"],"names":["Registry","Singleton","instanceKey","Symbol","for","registerOfItems","Map","register","instance","instanceDebug","constructor","name","toString","has","instanceError","Error","set","getAs","key","get"],"rangeMappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","mappings":";;;;+BA+DoBA;;;eAAAA;;;2BA5DM;AAgB1B,MAAMA,iBAAsCC,oBAAS;IAEjD,0CAA0C;IAE1C,aAAqB;QACjB,KAAK;QACL,IAAI,CAACC,WAAW,GAAGC,OAAOC,GAAG,CAAC,CAAC,gBAAgB,CAAC;IACpD;IAEOC,kBAA4C,IAAIC,MAAiB;IAEjEC,SAA4BC,QAAW,EAAU;QACpD,IAAI,CAACC,aAAa,CAAC,CAAC,UAAU,EAAED,SAASE,WAAW,CAACC,IAAI,CAAC,YAAY,EAAEH,SAASN,WAAW,CAACU,QAAQ,GAAG,CAAC,CAAC;QAE1G,IAAI,IAAI,CAACP,eAAe,CAACQ,GAAG,CAACL,SAASN,WAAW,GAAG;YAChD,MAAM,IAAI,CAACY,aAAa,CAAC,iBAAiB,gBACtC,IAAIC,MAAM,CAAC,+BAA+B,EAAEP,SAASN,WAAW,CAACU,QAAQ,GAAG,kBAAkB,CAAC,GAC3F,CAAC,0BAA0B,CAAC;QAExC;QAEA,IAAI,CAACP,eAAe,CAACW,GAAG,CAACR,SAASN,WAAW,EAAEM;QAC/C,IAAI,CAACC,aAAa,CAAC,CAAC,SAAS,EAAED,SAASE,WAAW,CAACC,IAAI,CAAC,YAAY,EAAEH,SAASN,WAAW,CAACU,QAAQ,GAAG,CAAC,CAAC;QACzG,OAAOJ,SAASN,WAAW;IAC/B;IAEOe,MAA8CC,GAAW,EAAK;QACjE,IAAI,CAACT,aAAa,CAAC,CAAC,0BAA0B,EAAES,IAAIN,QAAQ,GAAG,CAAC,CAAC;QAEjE,IAAI,CAAC,IAAI,CAACP,eAAe,CAACQ,GAAG,CAACK,MAAM;YAChC,MAAM,IAAI,CAACJ,aAAa,CAAC,WAAW,0BAChC,IAAIC,MAAM,CAAC,sBAAsB,EAAEG,IAAIN,QAAQ,GAAG,mBAAmB,CAAC,GAClE,CAAC,6BAA6B,CAAC;QAE3C;QAEA,MAAMJ,WAAY,IAAI,CAACH,eAAe,CAACc,GAAG,CAACD;QAC3C,IAAI,CAACT,aAAa,CAAC,CAAC,WAAW,EAAED,SAASE,WAAW,CAACC,IAAI,CAAC,YAAY,EAAEH,SAASN,WAAW,CAACU,QAAQ,GAAG,CAAC,CAAC;QAC3G,OAAOJ;IACX;AAGJ"}